# -*- coding: utf-8 -*-
"""
@author: Emirhan Ak
"""

# Form implementation generated from reading ui file 'hubAllocationUserInterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from heureticsFunctionality import HeureticsTab
from dialogKMeans import Ui_dialogKMeans
from dialogAffinityPropagation import Ui_dialogAffinityPropagation
from dialogMeanShift import Ui_dialogMeanShift
from dialogHierarchialClustering import Ui_dialogHierarchialClustering
from dialogSpectralClustering import Ui_dialogSpectralClustering
from dialogDBSCAN import Ui_dialogDBSCAN
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure

class createCanvas(FigureCanvasQTAgg):
    
    def __init__(self, parent = None, w = 50, h = 40, d = 100):
        fig = Figure(figsize = (w, h), dpi = d)
        self.axes = fig.add_subplot(111)
        super(createCanvas, self).__init__(fig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1008, 561)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.openDataButton = QtWidgets.QPushButton(self.centralwidget)
        self.openDataButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../images/open_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openDataButton.setIcon(icon)
        self.openDataButton.setObjectName("openDataButton")
        self.verticalLayout_5.addWidget(self.openDataButton)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.initialSolutionSaveButton = QtWidgets.QPushButton(self.groupBox)
        self.initialSolutionSaveButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../images/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.initialSolutionSaveButton.setIcon(icon1)
        self.initialSolutionSaveButton.setObjectName("initialSolutionSaveButton")
        self.verticalLayout.addWidget(self.initialSolutionSaveButton)
        self.initialSolutionSaveAsButton = QtWidgets.QPushButton(self.groupBox)
        self.initialSolutionSaveAsButton.setText("")
        self.initialSolutionSaveAsButton.setIcon(icon1)
        self.initialSolutionSaveAsButton.setObjectName("initialSolutionSaveAsButton")
        self.verticalLayout.addWidget(self.initialSolutionSaveAsButton)
        self.initialSolutionExportButton = QtWidgets.QPushButton(self.groupBox)
        self.initialSolutionExportButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../images/export.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.initialSolutionExportButton.setIcon(icon2)
        self.initialSolutionExportButton.setObjectName("initialSolutionExportButton")
        self.verticalLayout.addWidget(self.initialSolutionExportButton)
        self.initalSolutionClearButton = QtWidgets.QPushButton(self.groupBox)
        self.initalSolutionClearButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../images/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.initalSolutionClearButton.setIcon(icon3)
        self.initalSolutionClearButton.setObjectName("initalSolutionClearButton")
        self.verticalLayout.addWidget(self.initalSolutionClearButton)
        self.initalSolutionUndoButton = QtWidgets.QPushButton(self.groupBox)
        self.initalSolutionUndoButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../images/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.initalSolutionUndoButton.setIcon(icon4)
        self.initalSolutionUndoButton.setObjectName("initalSolutionUndoButton")
        self.verticalLayout.addWidget(self.initalSolutionUndoButton)
        self.verticalLayout_5.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.finalSolutionSaveButton = QtWidgets.QPushButton(self.groupBox_2)
        self.finalSolutionSaveButton.setText("")
        self.finalSolutionSaveButton.setIcon(icon1)
        self.finalSolutionSaveButton.setObjectName("finalSolutionSaveButton")
        self.verticalLayout_2.addWidget(self.finalSolutionSaveButton)
        self.finalSolutionSaveAsButton = QtWidgets.QPushButton(self.groupBox_2)
        self.finalSolutionSaveAsButton.setText("")
        self.finalSolutionSaveAsButton.setIcon(icon1)
        self.finalSolutionSaveAsButton.setObjectName("finalSolutionSaveAsButton")
        self.verticalLayout_2.addWidget(self.finalSolutionSaveAsButton)
        self.finalSolutionExportButton = QtWidgets.QPushButton(self.groupBox_2)
        self.finalSolutionExportButton.setText("")
        self.finalSolutionExportButton.setIcon(icon2)
        self.finalSolutionExportButton.setObjectName("finalSolutionExportButton")
        self.verticalLayout_2.addWidget(self.finalSolutionExportButton)
        self.finalSolutionClearButton = QtWidgets.QPushButton(self.groupBox_2)
        self.finalSolutionClearButton.setText("")
        self.finalSolutionClearButton.setIcon(icon3)
        self.finalSolutionClearButton.setObjectName("finalSolutionClearButton")
        self.verticalLayout_2.addWidget(self.finalSolutionClearButton)
        self.finalSolutionUndoButton = QtWidgets.QPushButton(self.groupBox_2)
        self.finalSolutionUndoButton.setText("")
        self.finalSolutionUndoButton.setIcon(icon4)
        self.finalSolutionUndoButton.setObjectName("finalSolutionUndoButton")
        self.verticalLayout_2.addWidget(self.finalSolutionUndoButton)
        self.verticalLayout_5.addWidget(self.groupBox_2)
        self.gridLayout.addLayout(self.verticalLayout_5, 0, 0, 2, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.clusteringKMeansButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringKMeansButton.setObjectName("clusteringKMeansButton")
        self.horizontalLayout.addWidget(self.clusteringKMeansButton)
        self.clusteringAffinityPropagationButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringAffinityPropagationButton.setObjectName("clusteringAffinityPropagationButton")
        self.horizontalLayout.addWidget(self.clusteringAffinityPropagationButton)
        self.clusteringMeanShiftButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringMeanShiftButton.setObjectName("clusteringMeanShiftButton")
        self.horizontalLayout.addWidget(self.clusteringMeanShiftButton)
        self.clusteringSpectralClusteringButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringSpectralClusteringButton.setObjectName("clusteringSpectralClusteringButton")
        self.horizontalLayout.addWidget(self.clusteringSpectralClusteringButton)
        self.clusteringHierarchialClusteringButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringHierarchialClusteringButton.setObjectName("clusteringHierarchialClusteringButton")
        self.horizontalLayout.addWidget(self.clusteringHierarchialClusteringButton)
        self.clusteringDBSCANButton = QtWidgets.QPushButton(self.groupBox_3)
        self.clusteringDBSCANButton.setObjectName("clusteringDBSCANButton")
        self.horizontalLayout.addWidget(self.clusteringDBSCANButton)
        self.horizontalLayout_6.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.heureticsHillClimbingButton = QtWidgets.QPushButton(self.groupBox_4)
        self.heureticsHillClimbingButton.setObjectName("heureticsHillClimbingButton")
        self.horizontalLayout_2.addWidget(self.heureticsHillClimbingButton)
        self.heureticsSimulatedAnnelingButton = QtWidgets.QPushButton(self.groupBox_4)
        self.heureticsSimulatedAnnelingButton.setObjectName("heureticsSimulatedAnnelingButton")
        self.horizontalLayout_2.addWidget(self.heureticsSimulatedAnnelingButton)
        self.horizontalLayout_6.addWidget(self.groupBox_4)
        self.gridLayout.addLayout(self.horizontalLayout_6, 0, 1, 1, 1)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.groupBox_5)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.manualSolutionHubsTextBox = QtWidgets.QTextEdit(self.groupBox_5)
        self.manualSolutionHubsTextBox.setObjectName("manualSolutionHubsTextBox")
        self.verticalLayout_3.addWidget(self.manualSolutionHubsTextBox)
        self.label_2 = QtWidgets.QLabel(self.groupBox_5)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.manualSolutionNodesTextBox = QtWidgets.QTextEdit(self.groupBox_5)
        self.manualSolutionNodesTextBox.setObjectName("manualSolutionNodesTextBox")
        self.verticalLayout_3.addWidget(self.manualSolutionNodesTextBox)
        self.pushButton = QtWidgets.QPushButton(self.groupBox_5)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_3.addWidget(self.pushButton)
        self.verticalLayout_6.addWidget(self.groupBox_5)
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.resultsTextBox = QtWidgets.QTextEdit(self.groupBox_6)
        self.resultsTextBox.setReadOnly(True)
        self.resultsTextBox.setObjectName("resultsTextBox")
        self.verticalLayout_4.addWidget(self.resultsTextBox)
        self.verticalLayout_6.addWidget(self.groupBox_6)
        self.gridLayout.addLayout(self.verticalLayout_6, 0, 2, 3, 1)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.initalSolutionGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.initalSolutionGroupBox.setObjectName("initalSolutionGroupBox")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.initalSolutionGroupBox)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_7.addWidget(self.initalSolutionGroupBox)
        self.finalSolutionGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.finalSolutionGroupBox.setObjectName("finalSolutionGroupBox")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.finalSolutionGroupBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_7.addWidget(self.finalSolutionGroupBox)
        self.gridLayout.addLayout(self.horizontalLayout_7, 1, 1, 1, 1)
        self.groupBox_9 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_9.setObjectName("groupBox_9")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.groupBox_9)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.infoPanelTextBox = QtWidgets.QTextEdit(self.groupBox_9)
        self.infoPanelTextBox.setReadOnly(True)
        self.infoPanelTextBox.setObjectName("infoPanelTextBox")
        self.horizontalLayout_5.addWidget(self.infoPanelTextBox)
        self.gridLayout.addWidget(self.groupBox_9, 2, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1008, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuExport_As = QtWidgets.QMenu(self.menuFile)
        self.menuExport_As.setObjectName("menuExport_As")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuClear = QtWidgets.QMenu(self.menuEdit)
        self.menuClear.setObjectName("menuClear")
        self.menuUndo = QtWidgets.QMenu(self.menuEdit)
        self.menuUndo.setObjectName("menuUndo")
        self.menuRedo = QtWidgets.QMenu(self.menuEdit)
        self.menuRedo.setObjectName("menuRedo")
        self.menuClustering = QtWidgets.QMenu(self.menubar)
        self.menuClustering.setObjectName("menuClustering")
        self.menuHeuretics = QtWidgets.QMenu(self.menubar)
        self.menuHeuretics.setObjectName("menuHeuretics")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_Data = QtWidgets.QAction(MainWindow)
        self.actionOpen_Data.setObjectName("actionOpen_Data")
        self.actionSave_Initial_Solution = QtWidgets.QAction(MainWindow)
        self.actionSave_Initial_Solution.setObjectName("actionSave_Initial_Solution")
        self.actionSave_Final_Solution = QtWidgets.QAction(MainWindow)
        self.actionSave_Final_Solution.setObjectName("actionSave_Final_Solution")
        self.actionExport_Initial_Solution = QtWidgets.QAction(MainWindow)
        self.actionExport_Initial_Solution.setObjectName("actionExport_Initial_Solution")
        self.actionExport_Final_Solution = QtWidgets.QAction(MainWindow)
        self.actionExport_Final_Solution.setObjectName("actionExport_Final_Solution")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionClear_Initial_Solution = QtWidgets.QAction(MainWindow)
        self.actionClear_Initial_Solution.setObjectName("actionClear_Initial_Solution")
        self.actionClear_Final_Solution = QtWidgets.QAction(MainWindow)
        self.actionClear_Final_Solution.setObjectName("actionClear_Final_Solution")
        self.actionUndo_Inital_Solution = QtWidgets.QAction(MainWindow)
        self.actionUndo_Inital_Solution.setObjectName("actionUndo_Inital_Solution")
        self.actionUndo_Final_Solution = QtWidgets.QAction(MainWindow)
        self.actionUndo_Final_Solution.setObjectName("actionUndo_Final_Solution")
        self.actionRedo_Initial_Solution = QtWidgets.QAction(MainWindow)
        self.actionRedo_Initial_Solution.setObjectName("actionRedo_Initial_Solution")
        self.actionRedo_Final_Solution = QtWidgets.QAction(MainWindow)
        self.actionRedo_Final_Solution.setObjectName("actionRedo_Final_Solution")
        self.actionK_Means = QtWidgets.QAction(MainWindow)
        self.actionK_Means.setObjectName("actionK_Means")
        self.actionAffinity_Propagation = QtWidgets.QAction(MainWindow)
        self.actionAffinity_Propagation.setObjectName("actionAffinity_Propagation")
        self.actionMean_shift = QtWidgets.QAction(MainWindow)
        self.actionMean_shift.setObjectName("actionMean_shift")
        self.actionSpectral_Clustering = QtWidgets.QAction(MainWindow)
        self.actionSpectral_Clustering.setObjectName("actionSpectral_Clustering")
        self.actionHierarchial_Clustering = QtWidgets.QAction(MainWindow)
        self.actionHierarchial_Clustering.setObjectName("actionHierarchial_Clustering")
        self.actionDBSCAN = QtWidgets.QAction(MainWindow)
        self.actionDBSCAN.setObjectName("actionDBSCAN")
        self.actionHill_Climbing = QtWidgets.QAction(MainWindow)
        self.actionHill_Climbing.setObjectName("actionHill_Climbing")
        self.actionSimulated_Anneling = QtWidgets.QAction(MainWindow)
        self.actionSimulated_Anneling.setObjectName("actionSimulated_Anneling")
        self.menuExport_As.addAction(self.actionExport_Initial_Solution)
        self.menuExport_As.addAction(self.actionExport_Final_Solution)
        self.menuFile.addAction(self.actionOpen_Data)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Initial_Solution)
        self.menuFile.addAction(self.actionSave_Final_Solution)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuExport_As.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuClear.addAction(self.actionClear_Initial_Solution)
        self.menuClear.addAction(self.actionClear_Final_Solution)
        self.menuUndo.addAction(self.actionUndo_Inital_Solution)
        self.menuUndo.addAction(self.actionUndo_Final_Solution)
        self.menuRedo.addAction(self.actionRedo_Initial_Solution)
        self.menuRedo.addAction(self.actionRedo_Final_Solution)
        self.menuEdit.addAction(self.menuClear.menuAction())
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.menuUndo.menuAction())
        self.menuEdit.addAction(self.menuRedo.menuAction())
        self.menuClustering.addAction(self.actionK_Means)
        self.menuClustering.addAction(self.actionAffinity_Propagation)
        self.menuClustering.addAction(self.actionMean_shift)
        self.menuClustering.addAction(self.actionSpectral_Clustering)
        self.menuClustering.addAction(self.actionHierarchial_Clustering)
        self.menuClustering.addAction(self.actionDBSCAN)
        self.menuHeuretics.addAction(self.actionHill_Climbing)
        self.menuHeuretics.addAction(self.actionSimulated_Anneling)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuClustering.menuAction())
        self.menubar.addAction(self.menuHeuretics.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        #Canvas Creation
        self.initalSolutionCanvas = createCanvas(self, w = 10, h = 10, d = 60)
        self.horizontalLayout_3.addWidget(self.initalSolutionCanvas)
        self.finalSolutionCanvas = createCanvas(self, w = 10, h = 10, d = 60)
        self.horizontalLayout_4.addWidget(self.finalSolutionCanvas)
        
        #Heuretics Object Creation
        self.heureticsObject = HeureticsTab(self.initalSolutionCanvas, self.finalSolutionCanvas, self.infoPanelTextBox, self.resultsTextBox)
        
        #File
        self.actionOpen_Data.triggered.connect(self.heureticsObject.openData)
        self.openDataButton.clicked.connect(self.heureticsObject.openData)
        
        self.actionSave_Initial_Solution.triggered.connect(self.heureticsObject.saveInitialSolutionAsTxt)
        self.initialSolutionSaveButton.clicked.connect(self.heureticsObject.saveInitialSolutionAsTxt)
        
        self.initialSolutionSaveAsButton.clicked.connect(self.heureticsObject.saveInitialSolutionAsTxt)
        
        self.actionExport_Initial_Solution.triggered.connect(self.heureticsObject.exportInitialSolutionAsTxtOrJpg)
        self.initialSolutionExportButton.clicked.connect(self.heureticsObject.exportInitialSolutionAsTxtOrJpg)
        
        self.actionSave_Final_Solution.triggered.connect(lambda : self.heureticsObject.saveFinalSolutionAsTxt(self.heureticsObject.getFinalSolutionData()))
        self.finalSolutionSaveButton.clicked.connect(lambda : self.heureticsObject.saveFinalSolutionAsTxt(self.heureticsObject.getFinalSolutionData()))
        
        self.finalSolutionSaveAsButton.clicked.connect(lambda : self.heureticsObject.saveFinalSolutionAsTxt(self.heureticsObject.getFinalSolutionData()))
        
        self.actionExport_Final_Solution.triggered.connect(self.heureticsObject.exportFinalSolutionAsTxtOrJpg)
        self.finalSolutionExportButton.clicked.connect(self.heureticsObject.exportFinalSolutionAsTxtOrJpg)
        
        self.actionExit.triggered.connect(MainWindow.close)
        
        #Edit
        self.actionClear_Initial_Solution.triggered.connect(self.heureticsObject.clearInitialData)
        self.initalSolutionClearButton.clicked.connect(self.heureticsObject.clearInitialData)
        
        self.actionClear_Final_Solution.triggered.connect(self.heureticsObject.clearFinalData)
        self.finalSolutionClearButton.clicked.connect(self.heureticsObject.clearFinalData)
        
        #Clustering Windows
        self.actionK_Means.triggered.connect(self.KMeansWindowPopup)
        self.clusteringKMeansButton.clicked.connect(self.KMeansWindowPopup)
        
        self.actionAffinity_Propagation.triggered.connect(self.AffinityPropagationWindowPopup)
        self.clusteringAffinityPropagationButton.clicked.connect(self.AffinityPropagationWindowPopup)

        self.actionMean_shift.triggered.connect(self.MeanShiftWindowPopup)
        self.clusteringMeanShiftButton.clicked.connect(self.MeanShiftWindowPopup)

        self.actionSpectral_Clustering.triggered.connect(self.SpectralClusteringWindowPopup)
        self.clusteringSpectralClusteringButton.clicked.connect(self.SpectralClusteringWindowPopup)
    
        self.actionHierarchial_Clustering.triggered.connect(self.HierarchialClusteringWindowPopup)
        self.clusteringHierarchialClusteringButton.clicked.connect(self.HierarchialClusteringWindowPopup)
        
        self.actionDBSCAN.triggered.connect(self.DBSCANWindowPopup)
        self.clusteringDBSCANButton.clicked.connect(self.DBSCANWindowPopup)
        
        #Heuretics Windows
        self.actionHill_Climbing.triggered.connect(self.heureticsObject.hillClimbingCalculation)
        self.heureticsHillClimbingButton.clicked.connect(self.heureticsObject.hillClimbingCalculation)
        
        self.actionSimulated_Anneling.triggered.connect(self.heureticsObject.simulatedAnnelingCalculation)
        self.heureticsSimulatedAnnelingButton.clicked.connect(self.heureticsObject.simulatedAnnelingCalculation)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HUB ALLOCATION USER INTERFACE"))
        self.groupBox.setTitle(_translate("MainWindow", "Initial Solution"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Final Solution"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Clustering"))
        self.clusteringKMeansButton.setText(_translate("MainWindow", "K-Means"))
        self.clusteringAffinityPropagationButton.setText(_translate("MainWindow", "Affinity Propagation"))
        self.clusteringMeanShiftButton.setText(_translate("MainWindow", "Mean-shift"))
        self.clusteringSpectralClusteringButton.setText(_translate("MainWindow", "Spectral Clustering"))
        self.clusteringHierarchialClusteringButton.setText(_translate("MainWindow", "Hierarchial Clustering"))
        self.clusteringDBSCANButton.setText(_translate("MainWindow", "DBSCAN"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Heuretics"))
        self.heureticsHillClimbingButton.setText(_translate("MainWindow", "Hill Climbing"))
        self.heureticsSimulatedAnnelingButton.setText(_translate("MainWindow", "Simulated Anneling"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Manual Solution"))
        self.label.setText(_translate("MainWindow", "Hubs"))
        self.label_2.setText(_translate("MainWindow", "Nodes"))
        self.pushButton.setText(_translate("MainWindow", "RUN"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Results"))
        self.initalSolutionGroupBox.setTitle(_translate("MainWindow", "Initial Solution"))
        self.finalSolutionGroupBox.setTitle(_translate("MainWindow", "Final Solution"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Info Panel"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuExport_As.setTitle(_translate("MainWindow", "Export As"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))
        self.menuUndo.setTitle(_translate("MainWindow", "Undo"))
        self.menuRedo.setTitle(_translate("MainWindow", "Redo"))
        self.menuClustering.setTitle(_translate("MainWindow", "Clustering"))
        self.menuHeuretics.setTitle(_translate("MainWindow", "Heuretics"))
        self.actionOpen_Data.setText(_translate("MainWindow", "Open Data"))
        self.actionOpen_Data.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_Initial_Solution.setText(_translate("MainWindow", "Save Initial Solution"))
        self.actionSave_Initial_Solution.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_Final_Solution.setText(_translate("MainWindow", "Save Final Solution"))
        self.actionExport_Initial_Solution.setText(_translate("MainWindow", "Initial Solution"))
        self.actionExport_Final_Solution.setText(_translate("MainWindow", "Final Solution"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Shift+F4"))
        self.actionClear_Initial_Solution.setText(_translate("MainWindow", "Initial Solution"))
        self.actionClear_Initial_Solution.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionClear_Final_Solution.setText(_translate("MainWindow", "Final Solution"))
        self.actionClear_Final_Solution.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))
        self.actionUndo_Inital_Solution.setText(_translate("MainWindow", "Inital Solution"))
        self.actionUndo_Final_Solution.setText(_translate("MainWindow", "Final Solution"))
        self.actionRedo_Initial_Solution.setText(_translate("MainWindow", "Initial Solution"))
        self.actionRedo_Final_Solution.setText(_translate("MainWindow", "Final Solution"))
        self.actionK_Means.setText(_translate("MainWindow", "K-Means"))
        self.actionK_Means.setShortcut(_translate("MainWindow", "Ctrl++"))
        self.actionAffinity_Propagation.setText(_translate("MainWindow", "Affinity Propagation"))
        self.actionAffinity_Propagation.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.actionMean_shift.setText(_translate("MainWindow", "Mean-shift"))
        self.actionSpectral_Clustering.setText(_translate("MainWindow", "Spectral Clustering"))
        self.actionHierarchial_Clustering.setText(_translate("MainWindow", "Hierarchial Clustering"))
        self.actionDBSCAN.setText(_translate("MainWindow", "DBSCAN"))
        self.actionHill_Climbing.setText(_translate("MainWindow", "Hill Climbing"))
        self.actionHill_Climbing.setShortcut(_translate("MainWindow", "Shift+S"))
        self.actionSimulated_Anneling.setText(_translate("MainWindow", "Simulated Anneling"))
        self.actionSimulated_Anneling.setShortcut(_translate("MainWindow", "Ctrl+B"))
        
    def KMeansWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.KMeansUI = Ui_dialogKMeans()
        self.KMeansUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:
            try:
                self.heureticsObject.kMeansCalculation(int(self.KMeansUI.dialogKMeans_nClusterTextBox.toPlainText()), self.KMeansUI.dialogKMeans_initComboBox.currentText()
                                        , int(self.KMeansUI.dialogKMeans_max_iterTextBox.toPlainText()), self.KMeansUI.dialogKMeans_algorithmComboBox.currentText())
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of clusters can't be zero.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Maximum number of iterations can't be zero.\n")
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("KMeans operation cancelled.")

        
    def AffinityPropagationWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.AffinityPropagationUI = Ui_dialogAffinityPropagation()
        self.AffinityPropagationUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:
            try:
               self.heureticsObject.affinityProagationCalculation(float(self.AffinityPropagationUI.dialogAffinityPropagation_dampingTextBox.toPlainText()),int(self.AffinityPropagationUI.dialogAffinityPropagation_max_iterTextBox.toPlainText()),
                                                    int(self.AffinityPropagationUI.dialogAffinityPropagation_convergence_iterTextBox.toPlainText()))
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Damping factor can't be outside the range [0.5, 1).\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Maximum number of iterations can't be zero.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Convergence iteration can't be zero.\n")
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("Affinity Propagation operation cancelled.")
        
    def MeanShiftWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.MeanShiftUI = Ui_dialogMeanShift()
        self.MeanShiftUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:
            try:
                if (self.MeanShiftUI.dialogMeanShift_bandwidthTextBox.toPlainText() == "None") & (self.MeanShiftUI.dialogMeanShift_bin_seedingComboBox.currentText()=="False"):
                    self.heureticsObject.meanShiftCalculation(iterationNumber = int(self.MeanShiftUI.dialogMeanShift_max_iterTextBox.toPlainText()))
                elif self.MeanShiftUI.dialogMeanShift_bandwidthTextBox.toPlainText() == "None":
                    self.heureticsObject.meanShiftCalculation(bandwidthValue=None,seedingsFlag=True, iterationNumber=int(self.MeanShiftUI.dialogMeanShift_max_iterTextBox.toPlainText()))
                elif self.MeanShiftUI.dialogMeanShift_bin_seedingComboBox.currentText()=="False":
                    self.heureticsObject.meanShiftCalculation(bandwidthValue =int(self.MeanShiftUI.dialogMeanShift_bandwidthTextBox.toPlainText()) ,iterationNumber =int(self.MeanShiftUI.dialogMeanShift_max_iterTextBox.toPlainText()))
                else:
                    self.heureticsObject.meanShiftCalculation(bandwidthValue=int(self.MeanShiftUI.dialogMeanShift_bandwidthTextBox.toPlainText()),seedingsFlag=True,iterationNumber = self.MeanShiftUI.dialogMeanShift_bin_seedingComboBox.currentText())
                
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Bandwidth can't be zero.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Maximum number of iterations can't be zero.\n")
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("Mean Shift operation cancelled.")
        
    def SpectralClusteringWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.SpectralClusteringUI = Ui_dialogSpectralClustering()
        self.SpectralClusteringUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:    
            try:
                self.heureticsObject.spectralClusteringCalculation(numberOfClusters=int(self.SpectralClusteringUI.dialogSpectralClustering_n_clusterTextBox.toPlainText()),numberOfNeighbors = int(self.SpectralClusteringUI.dialogSpectralClustering_n_neighborsTextBox.toPlainText()),
                                                    initilazierNumber=int(self.SpectralClusteringUI.dialogSpectralClustering_n_initTextBox.toPlainText()),affinityType=self.SpectralClusteringUI.dialogSpectralClustering_affinityComboBox.currentText(),labelToAssign=self.SpectralClusteringUI.dialogSpectralClustering_assign_labelsComboBox.currentText())
           
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of clusters can't be zero\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of neighbors can't be zero. It is ignored when affinity is set to \"rbf\".\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- When affinity is set to \"nearest neighbors\", Number of neighbors must be smaller than or equal to number of samples.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of initialization can't be zero.\n")
       
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("Spectral Clustering operation cancelled.") 
        
    def HierarchialClusteringWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.HierarchialClusteringUI = Ui_dialogHierarchialClustering()
        self.HierarchialClusteringUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:
            try:
                self.heureticsObject.hierarchialClusteringCalculation(numberOfClusters=int(self.HierarchialClusteringUI.dialogHierarhialClustering_n_clusterTextBox.toPlainText()),
                                                    affinityType=self.HierarchialClusteringUI.dialogHierarchialClustering_affinityComboBox.currentText(),linkageType=self.HierarchialClusteringUI.dialogHierarchialClustering_linkageComboBox.currentText())
                
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of clusters can't be zero.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- When linkage type is set to \"ward\", only \"euclidian\" is allowed.\n")
               
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("Hierarchial Clustering operation cancelled.") 
        
    def DBSCANWindowPopup(self):
        self.window = QtWidgets.QDialog()
        self.DBSCANUI = Ui_dialogDBSCAN()
        self.DBSCANUI.setupUi(self.window)
        self.window.show()
        
        RSP = self.window.exec_()
        if RSP == QtWidgets.QDialog().Accepted:
            try:
                self.heureticsObject.DBSCANCalculation(epsValue=float(self.DBSCANUI.dialogDBSCAN_epsTextBox.toPlainText()),minimumNumberOfSamples=int(self.DBSCANUI.dialogDBSCAN_min_samplesTextBox.toPlainText()),algorithmType=self.DBSCANUI.dialogDBSCAN_algorithmComboBox.currentText())
                
            except:
                self.heureticsObject.infoPanelTextBoxObject.setText("There is a problem with the values you set, please check;\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- EPS value can't be zero.\n")
                self.heureticsObject.infoPanelTextBoxObject.append("- Number of samples can't be zero.\n")
        else:
            self.heureticsObject.infoPanelTextBoxObject.setText("DBSCAN operation cancelled.")
            
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())